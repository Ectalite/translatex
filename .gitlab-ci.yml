default:
  image: python:3.10.11-bullseye

  # Pip's cache doesn't store the python packages
  # https://pip.pypa.io/en/stable/topics/caching/
  #
  # If you want to also cache the installed packages, you have to install
  # them in a virtualenv and cache it as well.
  cache:
    paths:
      - .cache/pip
      - .venv/

  before_script:
    ## Install packages
    - python --version ; pip --version  # For debugging
    - python -m venv .venv/
    - source .venv/bin/activate
    - pip install -e .

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

test:
  stage: test
  before_script:
    - pip install -e ".[test]"
  script:
    - pytest --durations=0 --cov=src/translatex -sv --runapi
    - coverage html -d public/coverage
  coverage: '/TOTAL.*\s+(\d+\%)/'
  artifacts:
    paths:
      - public
  tags:
    - docker

doc:
  stage: test
  before_script:
    - apt -y -qq update && apt -y -qq install graphviz
    - pip install -e ".[doc]"
  script:
    - sphinx-build -b html docs/source/ public/
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
  artifacts:
    paths:
      - public
  tags:
    - docker

pages:
  stage: deploy
  before_script:
    - apt -y -qq update && apt -y -qq install graphviz
    - pip install -e ".[doc]"
  script:
    - sphinx-build -b html docs/source/ public/
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  artifacts:
    paths:
      - public
  tags:
    - docker

release_job:
  stage: deploy
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  tags:
    - docker
  rules:
    - if: $CI_COMMIT_TAG                 # Run this job when a tag is created
  before_script:
    - apk add --no-cache git
    - git config --global --add safe.directory /builds/erken/sokoban
  script:
    - echo "running release_job for $CI_COMMIT_TAG"
    - LAST_TAGS=$(git for-each-ref --sort='-*committerdate' --count=2 --format '%(refname:short)' refs/tags)
    - CURRENT_TAG=$(echo $LAST_TAGS | head -n 1)
    - PREVIOUS_TAG=$(echo $LAST_TAGS | tail -n 1)
    - printf "# Changes\n\n" > RELEASE_NOTES.md
    - ./extract_changelog.py $CURRENT_TAG >> RELEASE_NOTES.md
    - printf "\n\n## Commits since the last version\n\n" >> RELEASE_NOTES.md
    - printf "<details><summary>Click to expand</summary>\n\n" >> RELEASE_NOTES.md
    - git log --pretty="- [%as] %s" --no-merges --reverse PREVIOUS_TAG..CURRENT_TAG >> RELEASE_NOTES.md
    - printf "\n\n</details>" >> RELEASE_NOTES.md
  release:                               # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: $CI_COMMIT_TAG
    name: 'Release $CI_COMMIT_TAG'
    description: './RELEASE_NOTES.md'

